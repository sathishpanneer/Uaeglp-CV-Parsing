// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Uaeglp.Models.ProfileModels;

namespace Uaeglp.Models
{
    [Table("LookupItem", Schema = "bbsf")]
    public partial class LookupItem
    {
        public LookupItem()
        {
            Adconnections = new HashSet<Adconnection>();
            Admappings = new HashSet<Admapping>();
            ApplicationAchievementAwardItems = new HashSet<ApplicationAchievement>();
            ApplicationAchievementMedalItems = new HashSet<ApplicationAchievement>();
            ApplicationAchievementReachedItems = new HashSet<ApplicationAchievement>();
            ApplicationAssessmentItems = new HashSet<Application>();
            ApplicationCycleLogs = new HashSet<ApplicationCycleLog>();
            ApplicationProgressApplicationSectionItems = new HashSet<ApplicationProgress>();
            ApplicationProgressApplicationSectionStatusItems = new HashSet<ApplicationProgress>();
            ApplicationReviewStatusItems = new HashSet<Application>();
            ApplicationSecurityItems = new HashSet<Application>();
            ApplicationStatusItems = new HashSet<Application>();
            ApplicationVideoAssessmentStatuses = new HashSet<Application>();
            AssessmentBlocks = new HashSet<AssessmentBlock>();
            AssessmentNarrativeReports = new HashSet<AssessmentNarrativeReport>();
            AssessmentToolAssessmentToolCategoryNavigations = new HashSet<AssessmentTool>();
            AssessmentToolAssessmentToolTypeNavigations = new HashSet<AssessmentTool>();
            AssignmentAnswers = new HashSet<AssignmentAnswer>();
            BadgeRequests = new HashSet<BadgeRequest>();
            ChatMessageAttachments = new HashSet<ChatMessageAttachment>();
            ChatMessages = new HashSet<ChatMessage>();
            ChatRooms = new HashSet<ChatRoom>();
            Configurations = new HashSet<Configuration>();
            Criteria = new HashSet<Criteria>();
            CriteriaClaims = new HashSet<CriteriaClaim>();
            GlpOrganizationItemTypes = new HashSet<GlpOrganizationItemType>();
            GlpOrganizationOrganizationEmirateLookupItems = new HashSet<GlpOrganization>();
            GlpOrganizationOrganizationIndustryItems = new HashSet<GlpOrganization>();
            GlpOrganizationOrganizationScaleItems = new HashSet<GlpOrganization>();
            GlpOrganizationOrganizationSectorTypeItems = new HashSet<GlpOrganization>();
            GlpOrganizationOrganizationTypeItems = new HashSet<GlpOrganization>();
            GovernmentEntities = new HashSet<GovernmentEntity>();
            InitiativeProfiles = new HashSet<InitiativeProfile>();
            Initiatives = new HashSet<Initiative>();
            InitiativeProfilesStatus = new HashSet<InitiativeProfile>();
            KnowledgeHubCourseCourseTypes = new HashSet<KnowledgeHubCourse>();
            KnowledgeHubCourseProviderTypes = new HashSet<KnowledgeHubCourse>();
            KnowledgeHubs = new HashSet<KnowledgeHub>();
            Meetups = new HashSet<Meetup>();
            Participants = new HashSet<Participant>();
            ProfileAchievementAwardItems = new HashSet<ProfileAchievement>();
            ProfileAchievementImpactItems = new HashSet<ProfileAchievement>();
            ProfileAchievementMedalItems = new HashSet<ProfileAchievement>();
            ProfileAchievementReachedItems = new HashSet<ProfileAchievement>();
            ProfileAchievementVerbItems = new HashSet<ProfileAchievement>();
            ProfileCitizenshipStatuses = new HashSet<Profile>();
            ProfileEducationDegreeItems = new HashSet<ProfileEducation>();
            ProfileEducationEmirateItems = new HashSet<ProfileEducation>();
            ProfileEmirateItems = new HashSet<Profile>();
            ProfileEvents = new HashSet<ProfileEvent>();
            ProfileInterests = new HashSet<ProfileInterest>();
            ProfileLearningPreferences = new HashSet<ProfileLearningPreference>();
            ProfileMeetups = new HashSet<ProfileMeetup>();
            ProfilePassportIssueEmirateItems = new HashSet<Profile>();
            ProfileTags = new HashSet<ProfileTag>();
            ProfileWorkExperiences = new HashSet<ProfileWorkExperience>();
            Programmes = new HashSet<Programme>();
            Providers = new HashSet<Provider>();
            QuestionItemEnglishTestTypes = new HashSet<QuestionItem>();
            QuestionItemLevels = new HashSet<QuestionItem>();
            Questions = new HashSet<Question>();
            SubAssessmentTools = new HashSet<SubAssessmentTool>();
            SurveyProfileQuestionAnswers = new HashSet<SurveyProfileQuestionAnswer>();
            SurveyQuestions = new HashSet<SurveyQuestion>();
            TemplateInfos = new HashSet<TemplateInfo>();
            Templates = new HashSet<Template>();
            TmetaskCorrelationTypeItems = new HashSet<Tmetask>();
            TmetaskTaskStatusItems = new HashSet<Tmetask>();
            VidAssesCriteria = new HashSet<VidAssesCriterion>();
            WorkflowActivities = new HashSet<WorkflowActivity>();
            WorkflowInstances = new HashSet<WorkflowInstance>();
            WorkflowVariableDataTypeItems = new HashSet<WorkflowVariable>();
            WorkflowVariableVariableTypeItems = new HashSet<WorkflowVariable>();
            ProfileLanguageItems = new HashSet<ProfileLanguage>();
            ProficiencyItems = new HashSet<ProfileLanguage>();
        }

        [Key]
        [Column("ID")]
        public int Id { get; set; }
        [Required]
        [Column("NameEN")]
        [StringLength(100)]
        public string NameEn { get; set; }
        [Required]
        [Column("NameAR")]
        [StringLength(100)]
        public string NameAr { get; set; }
        public bool Manageable { get; set; }
        public int DisplayOrder { get; set; }
        public string Value { get; set; }
        [Column("LookupID")]
        public int LookupId { get; set; }
        [Column(TypeName = "datetime")]
        public DateTime Created { get; set; }
        [Column(TypeName = "datetime")]
        public DateTime Modified { get; set; }
        [Required]
        [StringLength(256)]
        public string CreatedBy { get; set; }
        [Required]
        [StringLength(256)]
        public string ModifiedBy { get; set; }
        [Required]
        [StringLength(128)]
        public string Discriminator { get; set; }
        [Required]
        [StringLength(100)]
        public string SysName { get; set; }

        [ForeignKey(nameof(LookupId))]
        [InverseProperty("LookupItems")]
        public virtual Lookup Lookup { get; set; }
        [InverseProperty(nameof(Adconnection.AdconnectionTypeItem))]
        public virtual ICollection<Adconnection> Adconnections { get; set; }
        [InverseProperty(nameof(Admapping.AdmappingTypeItem))]
        public virtual ICollection<Admapping> Admappings { get; set; }
        [InverseProperty(nameof(ApplicationAchievement.AwardItem))]
        public virtual ICollection<ApplicationAchievement> ApplicationAchievementAwardItems { get; set; }
        [InverseProperty(nameof(ApplicationAchievement.MedalItem))]
        public virtual ICollection<ApplicationAchievement> ApplicationAchievementMedalItems { get; set; }
        [InverseProperty(nameof(ApplicationAchievement.ReachedItem))]
        public virtual ICollection<ApplicationAchievement> ApplicationAchievementReachedItems { get; set; }
        [InverseProperty(nameof(Application.AssessmentItem))]
        public virtual ICollection<Application> ApplicationAssessmentItems { get; set; }
        [InverseProperty(nameof(ApplicationCycleLog.ApplicationStatusItem))]
        public virtual ICollection<ApplicationCycleLog> ApplicationCycleLogs { get; set; }
        [InverseProperty(nameof(ApplicationProgress.ApplicationSectionItem))]
        public virtual ICollection<ApplicationProgress> ApplicationProgressApplicationSectionItems { get; set; }
        [InverseProperty(nameof(ApplicationProgress.ApplicationSectionStatusItem))]
        public virtual ICollection<ApplicationProgress> ApplicationProgressApplicationSectionStatusItems { get; set; }
        [InverseProperty(nameof(Application.ReviewStatusItem))]
        public virtual ICollection<Application> ApplicationReviewStatusItems { get; set; }
        [InverseProperty(nameof(Application.SecurityItem))]
        public virtual ICollection<Application> ApplicationSecurityItems { get; set; }
        [InverseProperty(nameof(Application.StatusItem))]
        public virtual ICollection<Application> ApplicationStatusItems { get; set; }
        [InverseProperty(nameof(Application.VideoAssessmentStatus))]
        public virtual ICollection<Application> ApplicationVideoAssessmentStatuses { get; set; }
        [InverseProperty(nameof(AssessmentBlock.Level))]
        public virtual ICollection<AssessmentBlock> AssessmentBlocks { get; set; }
        [InverseProperty(nameof(AssessmentNarrativeReport.AssessmentCategory))]
        public virtual ICollection<AssessmentNarrativeReport> AssessmentNarrativeReports { get; set; }
        [InverseProperty(nameof(AssessmentTool.AssessmentToolCategoryNavigation))]
        public virtual ICollection<AssessmentTool> AssessmentToolAssessmentToolCategoryNavigations { get; set; }
        [InverseProperty(nameof(AssessmentTool.AssessmentToolTypeNavigation))]
        public virtual ICollection<AssessmentTool> AssessmentToolAssessmentToolTypeNavigations { get; set; }
        [InverseProperty(nameof(AssignmentAnswer.StatusItem))]
        public virtual ICollection<AssignmentAnswer> AssignmentAnswers { get; set; }
        [InverseProperty(nameof(BadgeRequest.Status))]
        public virtual ICollection<BadgeRequest> BadgeRequests { get; set; }
        [InverseProperty(nameof(ChatMessageAttachment.AttachmentTypeItem))]
        public virtual ICollection<ChatMessageAttachment> ChatMessageAttachments { get; set; }
        [InverseProperty(nameof(ChatMessage.MessageTypeItem))]
        public virtual ICollection<ChatMessage> ChatMessages { get; set; }
        [InverseProperty(nameof(ChatRoom.RoomTypeItem))]
        public virtual ICollection<ChatRoom> ChatRooms { get; set; }
        [InverseProperty(nameof(Configuration.ScopeItem))]
        public virtual ICollection<Configuration> Configurations { get; set; }
        [InverseProperty(nameof(Models.Criteria.CriteriaCategory))]
        public virtual ICollection<Criteria> Criteria { get; set; }
        [InverseProperty(nameof(CriteriaClaim.Status))]
        public virtual ICollection<CriteriaClaim> CriteriaClaims { get; set; }
        [InverseProperty(nameof(GlpOrganizationItemType.ClientLookupItem))]
        public virtual ICollection<GlpOrganizationItemType> GlpOrganizationItemTypes { get; set; }
        [InverseProperty(nameof(GlpOrganization.OrganizationEmirateLookupItem))]
        public virtual ICollection<GlpOrganization> GlpOrganizationOrganizationEmirateLookupItems { get; set; }
        [InverseProperty(nameof(GlpOrganization.OrganizationIndustryItem))]
        public virtual ICollection<GlpOrganization> GlpOrganizationOrganizationIndustryItems { get; set; }
        [InverseProperty(nameof(GlpOrganization.OrganizationScaleItem))]
        public virtual ICollection<GlpOrganization> GlpOrganizationOrganizationScaleItems { get; set; }
        [InverseProperty(nameof(GlpOrganization.OrganizationSectorTypeItem))]
        public virtual ICollection<GlpOrganization> GlpOrganizationOrganizationSectorTypeItems { get; set; }
        [InverseProperty(nameof(GlpOrganization.OrganizationTypeItem))]
        public virtual ICollection<GlpOrganization> GlpOrganizationOrganizationTypeItems { get; set; }
        [InverseProperty(nameof(GovernmentEntity.EntityTypeItem))]
        public virtual ICollection<GovernmentEntity> GovernmentEntities { get; set; }
        [InverseProperty(nameof(InitiativeProfile.StatusItem))]
        public virtual ICollection<InitiativeProfile> InitiativeProfiles { get; set; }

        [InverseProperty(nameof(InitiativeProfile.Status))]
        public virtual ICollection<InitiativeProfile> InitiativeProfilesStatus { get; set; }

        [InverseProperty(nameof(Initiative.InitiativeTypeItem))]
        public virtual ICollection<Initiative> Initiatives { get; set; }
        [InverseProperty(nameof(KnowledgeHubCourse.CourseType))]
        public virtual ICollection<KnowledgeHubCourse> KnowledgeHubCourseCourseTypes { get; set; }
        [InverseProperty(nameof(KnowledgeHubCourse.ProviderType))]
        public virtual ICollection<KnowledgeHubCourse> KnowledgeHubCourseProviderTypes { get; set; }
        [InverseProperty(nameof(KnowledgeHub.Category))]
        public virtual ICollection<KnowledgeHub> KnowledgeHubs { get; set; }
        [InverseProperty(nameof(Meetup.StatusItem))]
        public virtual ICollection<Meetup> Meetups { get; set; }
        [InverseProperty(nameof(Participant.ParticipantTypeItem))]
        public virtual ICollection<Participant> Participants { get; set; }
        [InverseProperty(nameof(ProfileAchievement.AwardItem))]
        public virtual ICollection<ProfileAchievement> ProfileAchievementAwardItems { get; set; }
        [InverseProperty(nameof(ProfileAchievement.ImpactItem))]
        public virtual ICollection<ProfileAchievement> ProfileAchievementImpactItems { get; set; }
        [InverseProperty(nameof(ProfileAchievement.MedalItem))]
        public virtual ICollection<ProfileAchievement> ProfileAchievementMedalItems { get; set; }
        [InverseProperty(nameof(ProfileAchievement.ReachedItem))]
        public virtual ICollection<ProfileAchievement> ProfileAchievementReachedItems { get; set; }
        [InverseProperty(nameof(ProfileAchievement.VerbItem))]
        public virtual ICollection<ProfileAchievement> ProfileAchievementVerbItems { get; set; }
        [InverseProperty(nameof(Profile.CitizenshipStatus))]
        public virtual ICollection<Profile> ProfileCitizenshipStatuses { get; set; }
        [InverseProperty(nameof(ProfileEducation.DegreeItem))]
        public virtual ICollection<ProfileEducation> ProfileEducationDegreeItems { get; set; }
        [InverseProperty(nameof(ProfileEducation.EmirateItem))]
        public virtual ICollection<ProfileEducation> ProfileEducationEmirateItems { get; set; }
        [InverseProperty(nameof(Profile.EmirateItem))]
        public virtual ICollection<Profile> ProfileEmirateItems { get; set; }
        [InverseProperty(nameof(ProfileEvent.EventStatusItem))]
        public virtual ICollection<ProfileEvent> ProfileEvents { get; set; }
        [InverseProperty(nameof(ProfileInterest.IdNavigation))]
        public virtual ICollection<ProfileInterest> ProfileInterests { get; set; }
        [InverseProperty(nameof(ProfileLearningPreference.LearningPreferenceItem))]
        public virtual ICollection<ProfileLearningPreference> ProfileLearningPreferences { get; set; }
        [InverseProperty(nameof(ProfileMeetup.MeetupStatusItem))]
        public virtual ICollection<ProfileMeetup> ProfileMeetups { get; set; }
        [InverseProperty(nameof(Profile.PassportIssueEmirateItem))]
        public virtual ICollection<Profile> ProfilePassportIssueEmirateItems { get; set; }
        [InverseProperty(nameof(ProfileTag.IdNavigation))]
        public virtual ICollection<ProfileTag> ProfileTags { get; set; }
        [InverseProperty(nameof(ProfileWorkExperience.EmirateItem))]
        public virtual ICollection<ProfileWorkExperience> ProfileWorkExperiences { get; set; }
        [InverseProperty(nameof(Programme.ProgrammeTypeItem))]
        public virtual ICollection<Programme> Programmes { get; set; }
        [InverseProperty(nameof(Provider.ProviderTypeItem))]
        public virtual ICollection<Provider> Providers { get; set; }
        [InverseProperty(nameof(QuestionItem.EnglishTestType))]
        public virtual ICollection<QuestionItem> QuestionItemEnglishTestTypes { get; set; }
        [InverseProperty(nameof(QuestionItem.Level))]
        public virtual ICollection<QuestionItem> QuestionItemLevels { get; set; }
        [InverseProperty(nameof(Question.QuestionTypeItem))]
        public virtual ICollection<Question> Questions { get; set; }
        [InverseProperty(nameof(SubAssessmentTool.SubAssessmentToolType))]
        public virtual ICollection<SubAssessmentTool> SubAssessmentTools { get; set; }
        [InverseProperty(nameof(SurveyProfileQuestionAnswer.SurveryQuestionTypeItem))]
        public virtual ICollection<SurveyProfileQuestionAnswer> SurveyProfileQuestionAnswers { get; set; }
        [InverseProperty(nameof(SurveyQuestion.QuestionTypeItem))]
        public virtual ICollection<SurveyQuestion> SurveyQuestions { get; set; }
        [InverseProperty(nameof(TemplateInfo.LanguageModeItem))]
        public virtual ICollection<TemplateInfo> TemplateInfos { get; set; }
        [InverseProperty(nameof(Template.CategoryItem))]
        public virtual ICollection<Template> Templates { get; set; }
        [InverseProperty(nameof(Tmetask.CorrelationTypeItem))]
        public virtual ICollection<Tmetask> TmetaskCorrelationTypeItems { get; set; }
        [InverseProperty(nameof(Tmetask.TaskStatusItem))]
        public virtual ICollection<Tmetask> TmetaskTaskStatusItems { get; set; }
        [InverseProperty(nameof(VidAssesCriterion.CriteriaCalculationType))]
        public virtual ICollection<VidAssesCriterion> VidAssesCriteria { get; set; }
        [InverseProperty(nameof(WorkflowActivity.ActivityTypeItem))]
        public virtual ICollection<WorkflowActivity> WorkflowActivities { get; set; }
        [InverseProperty(nameof(WorkflowInstance.InstanceStatusItem))]
        public virtual ICollection<WorkflowInstance> WorkflowInstances { get; set; }
        [InverseProperty(nameof(WorkflowVariable.DataTypeItem))]
        public virtual ICollection<WorkflowVariable> WorkflowVariableDataTypeItems { get; set; }
        [InverseProperty(nameof(WorkflowVariable.VariableTypeItem))]
        public virtual ICollection<WorkflowVariable> WorkflowVariableVariableTypeItems { get; set; }


        [InverseProperty(nameof(ProfileLanguage.LookupLanguage))]
        public virtual ICollection<ProfileLanguage> ProfileLanguageItems { get; set; }

        [InverseProperty(nameof(ProfileLanguage.LookupProficiency))]
        public virtual ICollection<ProfileLanguage> ProficiencyItems { get; set; }
        [InverseProperty(nameof(RecommendationFitDetails.LookupRecommendFit))]
        public virtual ICollection<RecommendationFitDetails> RecommendationFitItem { get; set; }
        [InverseProperty(nameof(RecommendLeadr.LookupRecommendSourceFit))]
        public virtual ICollection<RecommendLeadr> RecommendationSourceItem { get; set; }
        [InverseProperty(nameof(RecommendLeadr.LookupRecommendStatusItem))]
        public virtual ICollection<RecommendLeadr> RecommendationStatusItem { get; set; }

        [InverseProperty(nameof(RecommendLeadr.LookupRecommendProfileRecommended))]
        public virtual ICollection<RecommendLeadr> RecommendationProfileRecommended { get; set; }

        [InverseProperty(nameof(RecommendLeadr.LookupRecommendProfileRecommender))]
        public virtual ICollection<RecommendLeadr> RecommendationProfileRecommender { get; set; }

    }
}